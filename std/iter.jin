;[
since iterators may block thread, before entering them:
, use "alarm()" to set a timer
, unmask ALRM signal
, create a signal handler that will copy the stack, mkcontext , creates a new thread, switch context
, goto begining of the thread loop
]

Iter := &
	next: { X' }
	
	for'each:: { self, do !{ iterable :X' | ' } |
		'{for () {}}
	}
