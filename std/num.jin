; Num interface implemented by all number types (integer, floating point and complex numbers)

;[
minus operator:
, unary: "-x" is equivalent to "x.neg()"
, binary: "x - y" is equivalent to "x.sub(y)"
]

Num := Ord..String'rep..&
	add: { self :X':Num, other :X' | X' }
	neg: { self :X' | X' }
	sub:: { self :X', other :X' | :X'
	}
	
	mul: { self :X', other :X' | X' }
	div: { self :X', other :X' | X' }
	pow:: { self :X', other :X' | :X'
	}
	
	abs: { self :X' | X' }
	is'equal: {}
	is'less: {}
	
	to'string: {}
	
	set:: { self !X' |
		;{ }
	}
