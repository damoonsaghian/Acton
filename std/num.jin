;(
minus operator:
, unary: "-x" is equivalent to "x..neg()"
, binary: "x - y" is equivalent to "x..sub(y)"

https://flintlib.org/
https://flintlib.org/doc/fmpz.html
)

Numeric := Ord & String'rep & .
	add: { self :X':Num, other :X' | X' }
	sub:: { self :X', other :X' | :X'
	}
	
	neg: { self :X' | X' }
	abs: { self :X' | X' }
	
	mul: { self :X', other :X' | X' }
	div: { self :X', other :X' | X' }
	pow:: { self :X', other :X' | :X'
	}
	
	is'less: {}
	
	to'string: {}
	
	set:: { self !X' |
		;{ }
	}

Num = .
	next'up: { self | :Num
	}
	
	next'down: { self | :Num
	}
	
	cos: { self | :Num
	}
	acos: { self | :Num
	}
	cosh: { self | :Num
	}
	atanh: { self | :Num
	}
	sin: { self | :Num
	}
	asin: { self | :Num
	}
	sinh: { self | :Num
	}
	tan: { self | :Num
	}
	atan: { self | :Num
	}
	atan2: { self | :Num
	}
	tanh: { self | :Num
	}
	
	log: { self | :Num
	}
	log2: { self | :Num
	}
	log10: { self | :Num
	}
	
	nan:
	inf:
	
	e: ; base of the natural logarithm
	pi:
	
& Numeric.
	add: {}
	
	neg: { self | :Num
		;{ return -self }
	}
	
	abs:
	
	mul {}
	
	div: {}
	
	pow: {}
	
	is'less: {}
	
	to'string: {}

Num'z =

Num1 = .
	min: ;{}
	max: ;{}
	
	is'equal: {}
	
	;; creates a range iterator
	to: { self, rhs :Num1 | :Iter(Num1)
	}
		
	to'z: { self | :Num'z
		;{ return (double)self }
	}

& Numeric.
	add: {}
	
	neg: { self | :Num
		;{ return -self }
	}
	
	abs:
	
	mul: {}
	
	div: {}
	
	pow: {}
	
	is'less: {}
	
	to'string: {}

Num2 =

Num4 =

Num8 =
