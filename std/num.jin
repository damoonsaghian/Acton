;(
minus operator:
, unary: "-x" is equivalent to "x..neg()"
, binary: "x - y" is equivalent to "x..sub(y)"

https://flintlib.org/
https://flintlib.org/doc/fmpz.html
)

Nums := Num \ Num'z \ Num'u \ Num'c

Num = .
	add: { self, other :Nums | :Num
	}
	sub: { self, other :Nums | :Num
	}
	
	neg: { self | :Num }
	abs: { self | :Num }
	
	mul: { self, other :Nums | :Num
	}
	div: { self, other :Nums | :Num
	}
	pow: { self, other :Nums | :Num
	}
	
	next'up: { self | :Num
	}
	
	next'down: { self | :Num
	}
	
	cos: { self | :Num
	}
	acos: { self | :Num
	}
	cosh: { self | :Num
	}
	atanh: { self | :Num
	}
	sin: { self | :Num
	}
	asin: { self | :Num
	}
	sinh: { self | :Num
	}
	tan: { self | :Num
	}
	atan: { self | :Num
	}
	atan2: { self | :Num
	}
	tanh: { self | :Num
	}
	
	log: { self | :Num
	}
	log2: { self | :Num
	}
	log10: { self | :Num
	}
	
	nan:
	inf:
	
	e: ; base of the natural logarithm
	pi:

& Ord.
	is'less: {}

& String'rep.
	to'string: {}

Num'z =

Num'u = .
	add: { self, other :Num'u | :Num'u
	}
	sub: { self, other :Num'u | :Num'u
	}
	
	mul: { self, other :Num'u | :Num'u
	}
	div: { self, other :Num'u | :Num'u
	}
	pow: { self, other :Num'u | :Num'u
	}
	
	min: ;{}
	max: ;{}
	
	is'equal: {}
	
	;; creates a range iterator
	to: { self, rhs :Num'u | :Iter(Num'u)
	}
		
	to'z: { self | :Num'z
		;{ return (double)self }
	}

& Ord.
	is'less: {}

& String'rep.
	to'string: {}

Num'c =
