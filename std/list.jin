;{ #include <glib-2.0/glib/garray.h> }

;(
the initial Array will be on stack, if it's small
when we try to mutate it, and its size exceeds the initial size, it will be reallocated on heap

https://docs.gtk.org/glib/struct.Array.html
https://docs.gtk.org/glib/struct.ByteArray.html
https://docs.gtk.org/glib/struct.PtrArray.html

maybe in the future:
lists are implemented in a way that expanding them, and insert/remove in the middle, is efficient
the storage of a list is devided into equal sized segments
there is a field that contains the address of an array (on the heap),
	that keeps addresses and indexes of the following segments (also on the heap)
	index of a segment is the index of its first element in the whole array
https://github.com/amadvance/tommyds/
)

List :=

List = .
	new: {}
	
	get: { self ::List(X'), index :Num'u | :?X'
		;; checks if index is less than the length
	}
	
	append: { self !List(X'), element :X' |
	}
	
	extend: { self !List(X'), extention :List(X') |
	}
	
	put: { self !List(X'), element :X', index :Num'u |
	}
	
	insert: { self !List(X'), element :X', index :Num'u |
	}
	
	trim: { self!, index :Num'u |
	}
	
	remove: { self!, index :Num'u |
	}
	
	iter: { self ::List(X') | :Iter(X')
	}
