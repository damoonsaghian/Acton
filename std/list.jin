;[
lists are implemented in a way that expanding them, and insert/remove in the middle, is efficient
the storage of a list is devided into equal sized segments
there is a field that contains the address of an array (on the heap),
	that keeps addresses and indexes of the following segments (also on the heap)
	index of a segment is the index of its first element in the whole array
https://github.com/amadvance/tommyds/
]

List := &
	stack'part': '{void *[]}
	heap'pointers': '{void *[]}
	len: Int

List = &
	new: {}
	
	get: { self ::List(X'), index :Int | ::X'
	}
	
	append: { self !List(X'), element :X' |
	}
	
	extend: { self !List(X'), extention :':Iter |
	}
	
	put: { self !List(X'), element :X', index :Int |
	}
	
	insert: { self!, index :Int |
	}
	
	trim: { self!, index :Int |
	}
	
	remove: { self!, index :Int |
	}
