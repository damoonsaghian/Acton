comment line:
	; comment
note that ";" must be the first non'whitespace charactor on the line
comment block:
	;[ multi'line
	comment
	]

variable definition:
	v = ...
type anotation:
	v :T = ...

symbols:
	'symbol
if the first character of a symbol is a number, the apostrophe is not required
	yeah, number are just symbols
symbols are actually their own types:
	's :'s
a string is an array of UTF-8 symbols, and can be written as:
	'[abc]
string interpolation: '[abc{x}]

arrays:
	[1, 2, 3]
empty array:
	x :[Int] = []
indexing:
	x_1
maps with symbols as keys:
	[a: 1, b: 2, c: 3]
maps with variables as keys:
	[a : 1, b : 2, c : 3]
empty map:
	x :[Char, Int] = []

tuple:
	t = (1, 2, 3)
to access an element:
	t.1
tuples can be matched on sub'tuples:
	a, b = 1, 2, 3
to change an element:
	t.1 = 2
records (named tuples):
	nt = (a: 1, b: 2, c: 3)
to access an element:
	nt.a
records can be matched on tuples if the name of variables match:
	a, b = a: 1, b: 2
record/tuple product:
	p = (a: 1, b: 2) * (c: 3)
	p == (a: 1, b: 2, c: 3)

structs are like taged tuples or taged record:
	s1 = 's(1, 2)
	s1 = 's 1 2
	s2 = 's(a: 1, b: 2)
	s2 = 's a: 1 b: 2
note the types:
	s1 :'s(Int, Int)
	s2 :'s(a: Int, b: Int)
accessing elements is like in tuples and records:
	s1.1
	s2.a

function:
	f = { a :A, b :B -> ... }
function call:
	f x y
which is equivalent to:
	f(x, y)

{f x y} can be written as: | f x y

if'else:
	if condition {...} {...}
	if condition {...} | if c {...} {...} | if c {...} {...}
and or:
	'true .and {'false}
	'true .or {'false}
matching:
	match a {
		's b -> ...
		'nil -> ...
	}

loops:
	loop {...break...}
while {condition} { ... }
	for iterator { x -> ... }
which is equivalent to:
	iterator.for'each { x -> ... }

actors:
a = Actor B(x)
a.do { b -> ... }

modules are files containing definitions
to make a definition private, append an apostrophe to the end of its name
the file named "0" is the root module
the root module can contain the main function
to import definitions from other modules:
	m' = import '[module/path/relative/to/current/directory]
	C', f' = m
	x' = m.y
	m' = import '[/module/path/relative/to/project/root]
	m' = import '[//hostname/package name including major version/module/path]

type alias:
	T := (T1, T2)
enums:
	Bool := 'true + 'false
"C?" is a shortcut for "C + 'nil"
type aliases are applied only when comparing types

classes are autually type aliases for structs:
	C := 's(a: A, b: B)
defining methods:
	C = (
		new: { a :A -> :C
			b = ...
			's(a: a, b: b)
		},
		m: { self :C, x :X ->
			...
		}
	)
creating an instance:
	i = C.new x
or:
	i :C = 's a: x b: y
note that in the second case, declaring the type is mandatory
calling a method:
	i .m x
which is equivalent to:
	C.m i x

derived class (inheritance):
D := C * (e: E)
D :> C

generics:
	C(t) := 's(a: t, b: B)
restricted generics:
	C(t :> D) := 's(a: t, b: B)
