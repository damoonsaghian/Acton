comments:
	;; comment line
	;; comment
		block
	;;; comment
	block
	;

immutable borrow variable definition:
	v :T = ...
	v = ...
mutable borrow variable:
	v !T = ...
	v! = ...
immutable own variable:
	v ::T = ...
	v :: = ...
mutable own variable:
	v !:T = ...
	v !: = ...
assignment after definition (only possible for mutable variables):
	v = ...

numeric types:
, Num: floating point with mid-rad interval arithmetics
, Num'z: multi'precision integer
, Num'u: compiled to "unsigned int" type in C
, Num'c: compiled to "char" type in C
Num'u follows modular arithmetic (ie it wraps around on overflow)
literal numbers:
	1'234'567'890 ;; Num (by default), can be Num'z, or Num'u too
	1.23e4 ;; Num
	123z ;; Num'z
	0x1234'5678'9abc'def0 ;; Num'u (on 32 bits systems, this number will be stored as 0x9abc'def0)
	0'ab ;; Num'c (the character with hexadecimal ASCII code 0xab)
	0x ;; Num'c (ASCII code for "a" character)

lists:
	l :List(Num) = [1, 2, 3]
indexing:
	l_1
negative indices count from the end of the list
mutating lists:
	l! = [1, 2, 3]
	l..put 0 index: 0 ;; [0, 2, 3]
	l..put 4 index: 3 ;; [0, 2, 3, 4]
initial value of lists will be kept on stack
heap allocation will be used only when the lists needs to grow beyond its initial size

strings are UTF8 encoded, and implemented using lists:
	s :String = "abc def"
one word string:
	'abc
string interpolation: "abc{x}"
it's better to split long strings into a list of single'line strings:
	""
	first line
		second line
	""
which is equivalent to:
	["first line", "\tsecond line"]

dictionaries are indexed using strings (instead of integers as in lists):
	d :Dict(Num) = ["a": 1, "b": 2, "c": 3]
when keys are one word strings, this can also be written as:
	[a: 1, b: 2, c: 3]
indexing:
	d_'a

records:
	r :(a: Num, b: Num, c: Num) = a: 1, b: 2, c: 3
	r :(Num, Num, c: Num) = 1, 2, c: 3
alternative syntax:
	. a: 1 b: 2 c: 3
to access an element:
	r.a
	r.0
records can be matched on smaller records:
	a, b = 1, 2, 3
tagged fields can be matched on untaged ones, if the name of variables match:
	a, b = a: 1, b: 2
mutating a record:
	r.a = 10

record extension:
	(a: 1, b: 2) & (c: 3, d: 4)
the above behaves like:
	(a: 1, b: 2, c: 3, d: 4)
masking fields with the same type:
	(a: 1, b: 2) & (b: 3, c: 4)
which behaves like:
	(a: 1, b: 3, c: 4)

function:
	f = { a :A , b !B | :C ... }
note that the type of above function is:
	f :{ a :A , b !B | C }
this somehow strange type is to avoid contravarient behavior of function arguments, when we introduce interfaces
function call:
	f x y
which is equivalent to these forms:
	f(x, y)
	(x, y) # f
	f b: y a: x

default values for parameters:
	f = { a :A = ... , b !B = ... | :C ... }
	f b: y
	f x
	f()

{ f x y } can be written as: || f x y

conditional expression:
	condition..then { } else: { }
	condition..then { } { }
	condition..then { } || c.then { } || c.then { } { }

and or:
	a && b
	a \\ b
which are equivalent to:
	a..and {b}
	a..or {b}
not: -a

matching:
	a # {
		b :B | ...
		() | ...
	}

actor:
	a = Actor.new B.new(x, y)
	a..do { b !B | ... }

iterators:
	iter..each { x | ... }

modules are files containing definitions
any definition whose name is the module's name, with the first letter capitalized,
	and possibly an additional number or extension (separated with an apostrophe),
	will be exported (ie is accessible outside of the module)
to hide a definition, append an apostrophe at the end of its name: a' = ...
to access the definitions in a module which is inside a directory: dir.Definition
to hide a module so it can't be accessed from modules in the parent directory,
	append an apostrophe at the end of its file name

a package is a collection of modules
in a project directory, we can have multiple package directories
	the name of the package directory is the package name, plus a ".jin" extension
to use a package in a project, create a file named "package_name.p" with this format:
, double semicolons start a comment line
, entries are separated with empty new line
, each entry contains a URL of the form (where protocol can be gnunet, git):
	protocol://address'of'release'branch'of'the'project'containing'package'directory
, the next line of the entry can contain a public key,
	which will be used to check the signature provided by the package
entries will be tried in the given order, until one is available
if there is no entry in the .p file, it refers to a directory with the same name as the .p file,
	in the current project

to use a module inside a package:
	package'file'name.Definition
definitions in "std" package are directly accessible; there is no need for a ".p" file
packages that contain a file named "0.jina" (which must contain the init function) are program packages

structs:
	S := .
		a: A
		b:: B. 1 ; field with default value
defining methods:
	S = .
		new: { a :A |
			S. a
		}
		m1: { self, x :X | :Y
			...
		}
		m2: { self! |
			...
		}
private fields and methods (which can't be accessed from outside of the module),
	are indicated by puting an apostrophe at the end of their names
to create an instance of a struct:
	s :S = a: x, b: y
	s = S. a: x b: y
	s = S. a: x ; fields with default values can be omited
	s = S.new a: x
calling a method:
	s..m x
which is equivalent to:
	S.m s x

generics:
	S := a: X', b: X'
bounded generics:
	S := a: X':I, b: X'

singletons:
	B0 := () ;; false
	B0 = B0. ()
	B1 := () ;; true
	B1 = B1. ()
unions:
	B := B0 \ B1
type "?A" is a shortcut for "A\()"

interfaces:
	I := .
		m1: { self :A', x :X | Y }
		m2:: { self !A' |
			; default implementation
		}
interface inheritance:
	I3 := I1&I2& . ...
defining the methods of a struct that implements some interfaces:
	S = .
		...
	& I1.
		...
	& I2.
		...

to directly enter C code:
	;c ...
beware! with great power comes great responsibility
