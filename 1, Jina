Jina is a simple coherent programming language
Mahsa Jina Amini was a girl whose tragic murder by the evil regime, started a revolution in Iran
at her funeral, these words were written on a stone above her grave:
	beloved Jina, you will not die, your name will become a code

all complexities of usual type systems are resolved in a natural way,
	using records, record extensions, and treating types as normal data

actors are used to achieve lock'free concurrency, as well as static memory managment

memory management:
, in synchronous parts, it can be done statically (no need for a garbage collector)
	"https://www.toptal.com/software/eliminating-garbage-collector"
	"http://blog.skylight.io/rust-means-never-having-to-close-a-socket/"
, in asynchronous parts, use actors
	actor variables actually hold an ID, and thus can easily be copied across async parts of the program
	this implies that an ID can refer to a deallocated actor
	when we send a message to a deallocated actor, it will be ignored
"https://riker.rs/hierarchy/"
"https://crates.io/crates/aurum_actors"
	"https://docs.rs/aurum_actors/latest/aurum_actors/#forgeable-references"
"https://github.com/Xudong-Huang/may_actor"

sharing mutable data in concurrent parts of a program is problematic
a data race happens when these three behaviors occur:
, two or more pointers access the same data at the same time
, at least one of the pointers is being used to write to the data
, thereâ€™s no mechanism being used to synchronize access to the data

to deal with it, programming languages choose different approaches:
, abandon concurrency altogether; make single threaded programs
, implement complicated and error prone lock mechanisms
, abandon mutability like in pure functional programming; but since mutability is necessary any way,
	a complicated mechanism like monads, linear types, effects, or Clojure reference types, must be used
	"https://stackoverflow.com/questions/9132346/clojure-differences-between-ref-var-agent-atom-with-examples"
	"http://clojure-doc.org/articles/language/concurrency_and_parallelism.html#clojure-reference-types"
	any how, the lack of direct mutability, and the need for aggressive garbage collection,
		means that functional programming is not an efficient method
, use the approach taken by Pony "https://www.ponylang.io/"
	it controls aliasing (sharing) and mutability, using reference capabilities
	Pony's approach introduces many complexities, especially when dealing with generics
	i think the main reason for its complexities is that even class fields have reference capabilities
, simply use actors, and only allow actors and copy types to be shared concurrently

in Jina, I32 and I64 are immutable types; they will always be copied into variables
actors are opaque types and they also will be copied
all other types are mutable, so they will be referenced by variables
but inside a function, references captured from outside will be copy'on'write
	and if the lifetime of the reference can't be computed statically, it will just be copied
so we can't mutate the environment of a function; all mutations will be synchronous 

Jina compiles to C:
"https://yosefk.com/blog/c-as-an-intermediate-language.html"
"https://wiki.c2.com/?CeeAsAnIntermediateLanguage"
"https://github.com/dbohdan/compilers-targeting-c"
