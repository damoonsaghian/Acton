implementing a complete GUI toolkit is a lot of work
existing ones (like GTK) are single threaded
thus we can't access GTK widgets (and data structures containing them), from inside actors
solution:
"https://gtk-rs.org/docs/glib/source/fn.idle_add.html"
"https://docs.rs/fragile/1.0.0/fragile/struct.Fragile.html"
"https://docs.rs/send_wrapper/0.4.0/send_wrapper/"
we deal with Gobjects by wrapping them in a Gsend
Gsend embeds a Fragile which will be created in the GTK main thread (using "idle_add"),
	and then received (and put inside the Gsend) using a channel
Gsend.new gets a closure (instead of a Gobject value),
	the closure's return type is the type of the specific Gobject

"https://docs.rs/woab/0.6.0/woab/"

in addition, subclassing is a central concept in the design of GTK
the approach of "gtk-rs" to circumvent that, needs a lot of boilerplate
"https://gtk-rs.org/gtk4-rs/stable/latest/book/g_object_subclassing.html"
"https://www.figuiere.net/technotes/notes/tn002/" (subclassing Gtk widgets in Rust)
is there a way to hide these complexities?

or maybe it's better to implement a GUI library, from scratch
"https://github.com/kas-gui/kas"
Chromium Embedded Framework
	"https://github.com/Julusian/rust-cef"
	"https://github.com/cztomczak/cefpython"
ffmpeg
