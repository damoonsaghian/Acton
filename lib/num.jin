;include flint/flint.h
;ospkg-deb libflint-dev
;dlibs -lflint

;; https://flintlib.org/
;; https://flintlib.org/doc/fmpz.html

;;	minus operator:
	, unary: "-x" (no space after minus sign) is equivalent to "x.neg()"
	, binary: "x - y" is equivalent to "x.sub(y)"

;ns Num
	add = { self, other :Num\Num'z\Num'u | :Num
	}
	sub = { self, other :Num\Num'z\Num'u | :Num
	}
	
	neg = { self | :Num
	}
	abs = { self | :Num
	}
	
	mul = { self, other :Nums | :Num
	}
	div = { self, other :Nums | :Num
	}
	pow = { self, other :Nums | :Num
	}
	
	next'up = { self | :Num
	}
	
	next'down = { self | :Num
	}
	
	cos = { self | :Num
	}
	acos = { self | :Num
	}
	cosh = { self | :Num
	}
	atanh = { self | :Num
	}
	sin = { self | :Num
	}
	asin = { self | :Num
	}
	sinh = { self | :Num
	}
	tan = { self | :Num
	}
	atan = { self | :Num
	}
	atan2 = { self | :Num
	}
	tanh = { self | :Num
	}
	
	log = { self | :Num
	}
	log2 = { self | :Num
	}
	log10 = { self | :Num
	}
	
	nan =
	inf =
	
	e = ;; base of the natural logarithm
	pi =

;impl Ord
	is'less = {}

;impl String'rep
	to'string = {}

;ns Num'z

;ns Num'u
	add = { self, other :Num'u | :Num'u
	}
	sub = { self, other :Num'u | :Num'u
	}
	
	mul = { self, other :Num'u | :Num'u
	}
	div = { self, other :Num'u | :Num'u
	}
	pow = { self, other :Num'u | :Num'u
	}
	
	min = ;c
	max = ;c
	
	is'equal = {}
	
	;; creates a range iterator
	to = { self, arg2 :Num'u | :Iter[Num'u]
	}
	
	to'z = { self | :Num'z
		;c return (double)self
	}

;impl Ord
	is'less = {}

;impl String'rep
	to'string = {}

;ns Num'c
